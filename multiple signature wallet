//Multi sig wallet
//author: malik

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;


contract multi  {

    event Deposit(address indexed user, uint amount );
    event Submit(uint indexed txId);
    event Approve(address indexed sender, uint indexed txId);
    event Revoke(address indexed sender, uint indexed txId);

    struct Transaction {
       address to;
       uint value;
       bytes data;
       bool executed;
    }

    Transaction[] public transaction;
 
    
    mapping(uint =>mapping(address => bool)) public approved;

    //adresses of owners
    address[] owners;

    //mapping of address to boolean to check whether sender ia an owner
    mapping(address => bool) public isOwners;
    //number of signature required from owner for transaction to take place
    uint public required;

    constructor(address[] memory _owners, uint _required){
       require( _owners.length > 0, "no owner");
       require(_required > 0 && _required <= _owners.length, "invalid requirement");

       //loop through owners address
       for(uint i; i < _owners.length; i++){

         address owner = _owners[i];
         require(owner != address(0), "invalid address");
 
         //to check if owner is not yet added
         require(!isOwners[owner], "owner not unique");
         isOwners[owner] = true;

         owners.push(owner);
       }

       required = _required;
    }
    modifier onlyOwner {

     require(isOwners[msg.sender] == true, "you are not the owner");
     _;
    }

    modifier txExists(uint _txId){

      require(_txId < transaction.length, "transaction does not exists");
      _;
    }

    modifier notApproved(uint _txId){
       
     require( approved[_txId][msg.sender] != true, "trnsaction already approved");

     _;

    }

    modifier notExecuted(uint _txId){
      require(!transaction[_txId].executed, "tx has been executed");

      _;
    }
    

    // we call the deposit function when we receive ether
    receive() external payable{
        emit Deposit(msg.sender, msg.value);
    }

    function submit(address _to, uint _value, bytes calldata _data) external onlyOwner {
       transaction.push(Transaction({to: _to,value: _value,data: _data,executed: false}));
       emit Submit(transaction.length -1);
    }

    function approve( uint _txId) external onlyOwner txExists(_txId) notApproved(_txId) notExecuted(_txId) {
       approved[_txId][msg.sender] = true;
       emit Approve(msg.sender, _txId);
    }

    function getApproval(uint _txId) public view returns(uint count){
      for(uint i; i < owners.length; i++){
        if(approved[_txId][owners[i]]){
           count += 1;
        }
      }
    }

    function execute(uint _txId) external  notExecuted(_txId)  txExists(_txId) {
       require(getApproval(_txId) >= required, "approval votes not met");

       Transaction storage transactions = transaction[_txId];
       transactions.executed = true;
    }

    function revoke(uint _txId) external txExists(_txId) notExecuted(_txId) {

      require(approved[_txId][msg.sender], "not yet approved");

      approved[_txId][msg.sender] = false;
      emit Revoke(msg.sender, _txId);
    }
}
